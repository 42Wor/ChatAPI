<!DOCTYPE html>
<html lang="en">

<head>
    <title>Chat Application</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" type="image/x-icon" href="/Assets/Images/dgicon.svg">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.15/codemirror.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.15/theme/monokai.min.css">
    <script src="/Assets/Scripts/main.js"></script>
    <style>
        :root {
            --bg-dark: #0d1117;
            --bg-medium: #151b23;
            --bg-light: #444;
            --border-color: #555;
            --text-light: #d4d4d4;
            --primary-color: #007bff;
            --primary-hover: #0056b3;
            --user-message: #212d3e;
            --ai-message: transparent;
            --transition-speed: 0.3s;
            --main-border-color: #3d444d;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        html,
        body {
            height: 100%;
            font-family: 'Roboto', sans-serif;
            background-color: var(--bg-dark);
            color: var(--text-light);
            display: flex;
            width: 100%;
        }

        /* Chat List Styles */
        .chat-list-container {
            width: 250px;
            min-width: 250px;
            background-color: var(--bg-medium);
            border-right: 1px solid var(--border-color);
            padding: 10px;
            display: flex;
            flex-direction: column;
            overflow-y: auto;
            height: 100vh;
            transition: transform var(--transition-speed) ease-in-out,
                opacity var(--transition-speed) ease-in-out;
            position: relative;
            z-index: 10;
        }

        .chat-list-container.hidden {
            transform: translateX(-100%);
            opacity: 0;
            position: absolute;
        }

        .chat-list-header {
            color: white;
            font-weight: bold;
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 5px 0;
        }

        .chat-list-header button {
            background-color: transparent;
            color: white;
            border: 1px solid var(--border-color);
            padding: 5px 8px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.9em;
            transition: all 0.2s ease;
        }

        .chat-list-header button:hover {
            background-color: var(--border-color);
        }

        .chat-list-header button:active {
            transform: scale(0.95);
        }

        .chat-list {
            list-style: none;
            padding: 0;
            margin: 0;
            flex-grow: 1;
            overflow-y: auto;
        }

        .chat-list-item {
            background-color: transparent;
            border: .1rem solid var(--main-border-color);
            color: white;
            padding: 10px;
            margin-bottom: 5px;
            border-radius: 5px;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: all 0.3s ease;
        }

        .chat-list-item:hover {
            border-color: #007bff;
        }

        .chat-list-item button {
            background-color: transparent;
            color: white;
            border: none;
            cursor: pointer;
            opacity: 0.7;
            transition: all 0.2s ease;
        }

        .chat-list-item button:hover {
            opacity: 1;
            transform: scale(1.1);
        }

        /* Main Chat Area Styles */
        .chat-container {
            display: flex;
            flex-direction: column;
            height: 100vh;
            width: 100%;
            transition: margin-left var(--transition-speed) ease-in-out;
        }

        .chat-header {
            background-color: var(--bg-medium);
            padding: 15px;
            border-bottom: 1px solid var(--border-color);
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: sticky;
            top: 0;
            z-index: 5;
        }

        .chat-header-title {
            text-decoration: none;
            font-size: 20px;
            font-weight: bold;
            color: white;
        }


        .chat-content {
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            overflow: hidden;
            height: 100%;
        }

        .chat-messages {
            flex-grow: 1;
            overflow-y: auto;
            padding: 10px;
            background-color: var(--bg-dark);
        }

        .chat-input-container {
            padding: 10px;
            background-color: var(--bg-medium);
            border-top: 1px solid var(--border-color);
        }

        .chat-input-form {
            display: flex;
            gap: 5px;
        }

        .chat-input {
            flex-grow: 1;
            padding: 10px;
            border: 1px solid var(--border-color);
            border-radius: 5px;
            background-color: var(--bg-medium);
            color: var(--text-light);
            transition: border-color 0.2s ease;
        }

        .chat-input:focus {
            outline: none;
            border-color: var(--primary-color);
        }

        .send-button {
            padding: 10px 15px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .send-button:hover {
            background-color: var(--primary-hover);
        }

        .send-button:active {
            transform: scale(0.95);
        }

        /* Message Styles */
        .message {
            margin-bottom: 15px;
            display: flex;
            opacity: 0;
            transform: translateY(10px);
            transition: opacity 0.3s ease, transform 0.3s ease;
        }

        .message.show {
            opacity: 1;
            transform: translateY(0);
        }

        .user-message {
            justify-content: flex-end;
        }

        .ai-message {
            justify-content: flex-start;
        }

        .message-bubble {
            padding: 12px 16px;
            border-radius: 6px;
            border: .1rem solid var(--main-border-color);
            max-width: 80%;
            word-wrap: break-word;
            line-height: 1.4;
        }

        .user-message .message-bubble {
            background-color: var(--user-message);
            color: white;
            padding: 6px 8px;
            ;
        }

        .ai-message .message-bubble {
            background-color: var(--ai-message);
            color: var(--text-light);
        }

        /* Footer Styles */
        .chat-footer {
            padding: 8px 10px;
            border: .1rem solid var(--main-border-color);
            display: flex;
            justify-content: space-between;
            border-radius: 5px;
        }

        .footer-button {
            background-color: transparent;
            color: var(--text-light);
            border: none;
            cursor: pointer;
            padding: 5px 10px;
            border-radius: 5px;
            transition: all 0.2s ease;
        }

        .footer-button:hover {
            background-color: var(--border-color);
        }

        .chat-header button {
            background-color: transparent;
            color: white;
            border: none;
            cursor: pointer;
            font-size: 1.2em;
            transition: all 0.2s ease;
        }

        /* Responsive Styles */
        @media (max-width: 768px) {
            .chat-list-container {
                width: 80%;
                position: fixed;
                height: 100vh;
                z-index: 1000;
                box-shadow: 2px 0 5px rgba(0, 0, 0, 0.5);
            }

            .chat-list-container.hidden {
                display: none;
            }

            .chat-header button {
                display: block;
            }
        }

        /* Loading Animation */
        @keyframes pulse {

            0%,
            100% {
                opacity: 0.6;
            }

            50% {
                opacity: 1;
            }
        }

        .loading {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background-color: var(--text-light);
            animation: pulse 1.5s infinite ease-in-out;
            margin-left: 5px;
        }

        .typing-indicator {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
            color: var(--text-light);
            font-style: italic;
        }

        /* Code Block and Copy Button Styles */
        pre {
            position: relative;
            border: .1rem solid var(--main-border-color);
            background: transparent;
            padding: 1em;
            border-radius: 5px;
            overflow-x: auto;
            margin: 10px 0;
        }

        pre code {
            font-family: 'Courier New', monospace;
            color: var(--text-light);
        }

        .code-copy-button {
            position: absolute;
            top: 5px;
            right: 5px;
            background-color: var(--bg-light);
            color: var(--text-light);
            border: none;
            border-radius: 3px;
            padding: 3px 6px;
            cursor: pointer;
            opacity: 0;
            transition: opacity 0.2s ease;
            font-size: 0.8em;
        }

        .code-copy-button:hover {
            background-color: var(--primary-color);
        }

        pre:hover .code-copy-button {
            opacity: 1;
        }

        .profile-btn {
            font-size: 30px;
        }

        @media(max-width: 376px) {
            nav .logout-btn {
                top: 15px;
            }
        }

        @media(max-width: 339px) {
            nav .logout-btn {
                font-size: 0;
            }
        }

        .logout-btn {
            color: #fff;
            right: 8px;
            top: 18px;
            font-size: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: block;
        }

        .profile-menu {
            position: relative;
            display: inline-block;
        }

        .profile-menu .fas {
            font-size: 35px;
            cursor: pointer;
            color: #fff;
        }

        .dropdown-content {
            border: solid .1rem var(--main-border-color);
            display: none;
            position: absolute;
            right: 0;
            background-color: #151b23;
            min-width: 160px;
            z-index: 999;
            border-radius: 8px;
            overflow: hidden;
        }

        .dropdown-content .a {
            color: #fff;
            padding: 8px 20px;
            text-decoration: none;
            display: block;
            transition: background-color 0.3s ease;
            border: .1rem solid transparent;
        }

        .dropdown-content .a:hover {
            border: .1rem solid var(--main-border-color);
        }

        .dropdown-content .a1 {
            color: rgb(62, 177, 171);
            padding: 8px 20px;
            font-size: 20px;
            font-weight: 500;
            text-decoration: none;
            display: block;
            background-color: #262f3b;
            transition: background-color 0.3s ease;
            text-align: center;
        }

        .message-bubble code {
            background-color: #383838;
            border-radius: 2px;
            padding: 1px;
        }

        .chat-header-title span,
        .chat-header-title span a,
        .chat-header-title span a:visited {
            font-size: 10px;
            color: white;
        }

        /* Additional CSS for scroll-down button */
        .scroll-down-btn {
            position: fixed;
            bottom: 80px;
            right: 50%;
            width: 30px;
            height: 30px;
            background: linear-gradient(145deg, #3d444d, #0d1117);
            border-radius: 50%;
            display: none;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: 0 4px 8px rgba(0, 0, 0, .15);
            transition: all .3s ease;
        }
    </style>
</head>

<body>
    <!-- Chat History Sidebar -->
    <aside class="chat-list-container" id="chat-list-container">
        <div class="chat-list-header">
            <span>Chat History</span>
            <button id="new-chat-button">
                <i class="fas fa-plus"></i>
            </button>
            <button id="close-chat-list-button" aria-label="Close Chat List">
                <i class="fas fa-arrow-left"></i>
            </button>
        </div>
        <ul class="chat-list" id="chat-list">
            <!-- Chat history items will be inserted here -->
        </ul>
        <div class="chat-footer" style="display: none;">
            <button class="footer-button">
                <i class="fas fa-gear"></i> Settings
            </button>
            <a class="footer-button" href="/home">
                <i class="fas fa-home"></i> Home
            </a>
        </div>
    </aside>

    <!-- Main Chat Area -->
    <main class="chat-container" id="chat-container">
        <header class="chat-header">
            <button id="open-chat-list-button" aria-label="Open Chat List">
                <i class="fas fa-arrow-right"></i>
            </button>
            <div class="chat-header-title">AI Chat Bot<span> by <a href="https://mbktechstudio.com">MBK Tech
                        Studio</a></span></div>
            <div class="logout-btn">
                <div class="profile-menu">
                    <i class="fas fa-user-circle" onclick="toggleProfileMenu()"></i>
                    <div class="dropdown-content" id="profileDropdown">
                        <a class="a1" style="text-align:center;">
                            <div id="headerProfileUserName"></div>
                        </a>
                        <a class="a" href="/user/settings">Settings</a>
                        <a class="a" onclick="logout()">Logout</a>
                    </div>
                </div>
            </div>
        </header>

        <script>
            const headerElement = document.getElementById('headerProfileUserName');
            headerElement.textContent = getCookieValue('username') || 'Not Logged In';
            function toggleProfileMenu() {
                const dropdown = document.getElementById('profileDropdown');
                dropdown.style.display = dropdown.style.display === 'block'
                    ? 'none'
                    : 'block';
            } 
        </script>
        <section class="chat-content">
            <div class="chat-messages" id="chat-messages">
                <!-- Messages will be inserted here -->
            </div>
            <div id="scroll-down-btn" class="scroll-down-btn">
                <i class="fas fa-arrow-down"></i>
            </div>
            <div class="chat-input-container">
                <form class="chat-input-form" id="chat-form">
                    <input type="text" class="chat-input" id="chat-input" placeholder="Type your message here..."
                        autocomplete="off" aria-label="Chat input">
                    <button type="submit" class="send-button" id="send-button">
                        Send
                    </button>
                </form>
            </div>
        </section>
    </main>

    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script>



        // DOM Elements
        const chatMessages = document.getElementById('chat-messages');
        const chatForm = document.getElementById('chat-form');
        const chatInput = document.getElementById('chat-input');
        const sendButton = document.getElementById('send-button');
        const newChatButton = document.getElementById('new-chat-button');
        const chatList = document.getElementById('chat-list');
        const chatListContainer = document.getElementById('chat-list-container');
        const openChatListButton = document.getElementById('open-chat-list-button');
        const closeChatListButton = document.getElementById('close-chat-list-button');
        const chatContainer = document.getElementById('chat-container');

        const scrollDownBtn = document.getElementById('scroll-down-btn');

        function updateScrollDownBtnVisibility() {
            // if the gap between scrollTop and maximum scroll is over a threshold, show the button
            const threshold = 20;
            if (chatMessages.scrollHeight - chatMessages.scrollTop - chatMessages.clientHeight > threshold) {
                scrollDownBtn.style.display = 'flex';
            } else {
                scrollDownBtn.style.display = 'none';
            }
        }

        // Update button visibility on scroll
        chatMessages.addEventListener('scroll', updateScrollDownBtnVisibility);

        // On button click, scroll to the bottom of messages
        scrollDownBtn.addEventListener('click', () => {
            chatMessages.scrollTop = chatMessages.scrollHeight;
            updateScrollDownBtnVisibility();
        });
        // State variables
        let currentChatId = null;
        let isChatListVisible = true;
        let isWaitingForResponse = false;

        // Initialize the application
        function init() {
            setupEventListeners();
            checkInitialChat();
            fetchChatHistoryList();
            setupResponsiveBehavior();
        }

        // Set up all event listeners
        function setupEventListeners() {
            // Chat form submission
            chatForm.addEventListener('submit', handleFormSubmit);

            // Input field events
            chatInput.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    handleFormSubmit(e);
                }
            });

            // Chat list toggle buttons
            openChatListButton.addEventListener('click', showChatList);
            closeChatListButton.addEventListener('click', hideChatList);

            // New chat button
            newChatButton.addEventListener('click', startNewChat);

            // Window resize for responsive behavior
            window.addEventListener('resize', setupResponsiveBehavior);
        }

        // Check for initial chat from URL
        function checkInitialChat() {
            const pathSegments = window.location.pathname.split('/');
            const chatIdFromUrl = pathSegments[pathSegments.length - 1];

            if (chatIdFromUrl && chatIdFromUrl !== 'chatbot' && !isNaN(chatIdFromUrl)) {
                loadChat(chatIdFromUrl);
                currentChatId = chatIdFromUrl;
            } else {
                startNewChat();
            }
        }

        // Fetch chat history list
        function fetchChatHistoryList() {
            fetch('/api/chat/histories')
                .then(response => {
                    if (!response.ok) throw new Error('Failed to fetch chat histories');
                    return response.json();
                })
                .then(histories => {
                    renderChatList(histories);
                })
                .catch(error => {
                    console.error("Error fetching chat histories:", error);
                    showErrorToast("Failed to load chat history");
                });
        }

        // Render chat list items
        function renderChatList(histories) {
            chatList.innerHTML = '';

            if (histories.length === 0) {
                const emptyItem = document.createElement('li');
                emptyItem.textContent = 'No chat history yet';
                emptyItem.style.padding = '10px';
                emptyItem.style.color = 'var(--text-light)';
                emptyItem.style.textAlign = 'center';
                chatList.appendChild(emptyItem);
                return;
            }

            histories.forEach(history => {
                const listItem = document.createElement('li');
                listItem.className = 'chat-list-item';
                listItem.dataset.chatId = history.id;

                listItem.innerHTML = `
                    <span>Chat created ${history.created_at}</span>
                    <button onclick="event.stopPropagation(); deleteChat('${history.id}')">
                        <i class="fas fa-trash"></i>
                    </button>
                `;

                listItem.addEventListener('click', () => {
                    window.location.href = `/chatbot/${history.id}`;
                });

                chatList.appendChild(listItem);
            });
        }

        // Load a specific chat
        function loadChat(chatId) {
            currentChatId = chatId;
            chatMessages.innerHTML = '';

            fetch(`/api/chat/histories/${chatId}`)
                .then(response => {
                    if (!response.ok) throw new Error('Failed to load chat');
                    return response.json();
                })
                .then(chatHistory => {
                    if (chatHistory?.conversation_history) {
                        chatHistory.conversation_history.forEach(message => {
                            if (message.role === 'user') {
                                addMessage(message.parts[0].text, 'user');
                            } else if (message.role === 'model') {
                                addMessage(message.parts[0].text, 'ai');
                            }
                        });
                    }
                })
                .catch(error => {
                    console.error("Error loading chat:", error);
                    showErrorToast("Failed to load chat");
                });
        }

        // Start a new chat
        function startNewChat() {
            currentChatId = null;
            chatMessages.innerHTML = '';
            chatInput.value = '';
            window.history.pushState({}, '', '/chatbot');
        }

        // Delete a chat
        function deleteChat(chatId) {
            if (!confirm('Are you sure you want to delete this chat?')) return;

            fetch(`/api/chat/clear-history/${chatId}`, { method: 'POST' })
                .then(response => {
                    if (!response.ok) throw new Error('Failed to delete chat');
                    return response.json();
                })
                .then(() => {
                    fetchChatHistoryList();
                    if (currentChatId === chatId) {
                        startNewChat();
                    }
                })
                .catch(error => {
                    console.error("Error deleting chat:", error);
                    showErrorToast("Failed to delete chat");
                });
        }

        // Handle form submission
        function handleFormSubmit(e) {
            e.preventDefault();

            const messageText = chatInput.value.trim();
            if (!messageText || isWaitingForResponse) return;

            addMessage(messageText, 'user');
            chatInput.value = '';
            isWaitingForResponse = true;
            showTypingIndicator();

            const payload = { message: messageText };
            if (currentChatId) {
                payload.chatId = currentChatId;
            }

            fetch('/api/bot-chat', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            })
                .then(response => {
                    if (!response.ok) throw new Error('API request failed');
                    return response.json();
                })
                .then(data => {
                    if (data.aiResponse) {
                        addMessage(data.aiResponse, 'ai');
                    }
                    if (data.newChatId && !currentChatId) {
                        currentChatId = data.newChatId;
                        fetchChatHistoryList();
                    }
                })
                .catch(error => {
                    console.error("Error calling API:", error);
                    addMessage("Error getting AI response. Please try again.", 'ai');
                })
                .finally(() => {
                    isWaitingForResponse = false;
                    hideTypingIndicator();
                });
        }

        // Add a message to the chat
        // Add a message to the chat
        function addMessage(text, sender) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}-message`;

            const content = sender === 'ai' ? marked.parse(text) : text;
            messageDiv.innerHTML = `<div class="message-bubble">${content}</div>`;

            // Add copy buttons to code blocks in AI messages
            if (sender === 'ai') {
                setTimeout(() => {
                    const codeBlocks = messageDiv.querySelectorAll('pre code');
                    codeBlocks.forEach((codeBlock) => {
                        const preElement = codeBlock.closest('pre');
                        if (preElement && !preElement.querySelector('.code-copy-button')) {
                            const copyButton = document.createElement('button');
                            copyButton.className = 'code-copy-button';
                            copyButton.title = 'Copy code';
                            copyButton.innerHTML = '<i class="fas fa-copy"></i>';

                            copyButton.addEventListener('click', (e) => {
                                e.stopPropagation();
                                const code = codeBlock.textContent;
                                copyToClipboard(code);

                                // Visual feedback
                                copyButton.innerHTML = '<i class="fas fa-check"></i>';
                                copyButton.style.color = '#4CAF50';
                                setTimeout(() => {
                                    copyButton.innerHTML = '<i class="fas fa-copy"></i>';
                                    copyButton.style.color = '';
                                }, 2000);
                            });

                            preElement.appendChild(copyButton);
                        }
                    });
                }, 0);
            }

            chatMessages.appendChild(messageDiv);
            setTimeout(() => messageDiv.classList.add('show'), 10);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // Helper function to copy text to clipboard (same as before)
        function copyToClipboard(text) {
            const textarea = document.createElement('textarea');
            textarea.value = text;
            textarea.style.position = 'fixed';
            document.body.appendChild(textarea);
            textarea.select();

            try {
                if (navigator.clipboard) {
                    navigator.clipboard.writeText(text).catch(err => {
                        console.error('Clipboard API failed, using fallback', err);
                        document.execCommand('copy');
                    });
                } else {
                    document.execCommand('copy');
                }
            } catch (err) {
                console.error('Copy failed:', err);
            } finally {
                document.body.removeChild(textarea);
            }
        }

        // Show typing indicator
        function showTypingIndicator() {
            const indicator = document.createElement('div');
            indicator.className = 'typing-indicator';
            indicator.id = 'typing-indicator';
            indicator.innerHTML = 'AI is typing <span class="loading"></span><span class="loading"></span><span class="loading"></span>';
            chatMessages.appendChild(indicator);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // Hide typing indicator
        function hideTypingIndicator() {
            const indicator = document.getElementById('typing-indicator');
            if (indicator) {
                indicator.remove();
            }
        }

        // Toggle chat list visibility
        function showChatList() {
            chatListContainer.classList.remove('hidden');
            isChatListVisible = true;
            openChatListButton.style.display = 'none';
        }

        function hideChatList() {
            chatListContainer.classList.add('hidden');
            isChatListVisible = false;
            openChatListButton.style.display = 'block';
        }

        // Responsive behavior
        function setupResponsiveBehavior() {
            if (window.innerWidth <= 768) {
                hideChatList();
            } else {
                showChatList();
            }
        }

        // Show error toast
        function showErrorToast(message) {
            const toast = document.createElement('div');
            toast.textContent = message;
            toast.style.position = 'fixed';
            toast.style.bottom = '20px';
            toast.style.right = '20px';
            toast.style.backgroundColor = '#ff4444';
            toast.style.color = 'white';
            toast.style.padding = '10px 20px';
            toast.style.borderRadius = '5px';
            toast.style.zIndex = '1000';
            document.body.appendChild(toast);

            setTimeout(() => {
                toast.style.opacity = '0';
                toast.style.transition = 'opacity 0.5s';
                setTimeout(() => toast.remove(), 500);
            }, 3000);
        }

        // Initialize the app when DOM is loaded
        document.addEventListener('DOMContentLoaded', init);
    </script>
</body>
<script src="/Assets/Scripts/main.js"></script>

</html>